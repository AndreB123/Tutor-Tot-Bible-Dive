// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0--rc1
// source: proto/chat_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatService_CreateMessage_FullMethodName       = "/proto.ChatService/CreateMessage"
	ChatService_CreateChat_FullMethodName          = "/proto.ChatService/CreateChat"
	ChatService_GetRecentMessages_FullMethodName   = "/proto.ChatService/GetRecentMessages"
	ChatService_StreamMessages_FullMethodName      = "/proto.ChatService/StreamMessages"
	ChatService_GetChatSummariesUID_FullMethodName = "/proto.ChatService/GetChatSummariesUID"
	ChatService_DeleteChatByID_FullMethodName      = "/proto.ChatService/DeleteChatByID"
	ChatService_DeleteAllChatsByUID_FullMethodName = "/proto.ChatService/DeleteAllChatsByUID"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	GetRecentMessages(ctx context.Context, in *GetRecentMessagesRequest, opts ...grpc.CallOption) (*GetRecentMessagesResponse, error)
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamMessagesClient, error)
	GetChatSummariesUID(ctx context.Context, in *GetChatSummariesUIDRequest, opts ...grpc.CallOption) (*GetChatSummariesUIDResponse, error)
	DeleteChatByID(ctx context.Context, in *DeleteChatByIDRequest, opts ...grpc.CallOption) (*DeleteChatByIDResponse, error)
	DeleteAllChatsByUID(ctx context.Context, in *DeleteAllChatsByUIDRequest, opts ...grpc.CallOption) (*DeleteAllChatsByUIDResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetRecentMessages(ctx context.Context, in *GetRecentMessagesRequest, opts ...grpc.CallOption) (*GetRecentMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetRecentMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamMessagesClient{ClientStream: stream}
	return x, nil
}

type ChatService_StreamMessagesClient interface {
	Send(*CreateMessageRequest) error
	Recv() (*CreateMessageResponse, error)
	grpc.ClientStream
}

type chatServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamMessagesClient) Send(m *CreateMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceStreamMessagesClient) Recv() (*CreateMessageResponse, error) {
	m := new(CreateMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) GetChatSummariesUID(ctx context.Context, in *GetChatSummariesUIDRequest, opts ...grpc.CallOption) (*GetChatSummariesUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatSummariesUIDResponse)
	err := c.cc.Invoke(ctx, ChatService_GetChatSummariesUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteChatByID(ctx context.Context, in *DeleteChatByIDRequest, opts ...grpc.CallOption) (*DeleteChatByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatByIDResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteChatByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteAllChatsByUID(ctx context.Context, in *DeleteAllChatsByUIDRequest, opts ...grpc.CallOption) (*DeleteAllChatsByUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllChatsByUIDResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteAllChatsByUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	GetRecentMessages(context.Context, *GetRecentMessagesRequest) (*GetRecentMessagesResponse, error)
	StreamMessages(ChatService_StreamMessagesServer) error
	GetChatSummariesUID(context.Context, *GetChatSummariesUIDRequest) (*GetChatSummariesUIDResponse, error)
	DeleteChatByID(context.Context, *DeleteChatByIDRequest) (*DeleteChatByIDResponse, error)
	DeleteAllChatsByUID(context.Context, *DeleteAllChatsByUIDRequest) (*DeleteAllChatsByUIDResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatServiceServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatServiceServer) GetRecentMessages(context.Context, *GetRecentMessagesRequest) (*GetRecentMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentMessages not implemented")
}
func (UnimplementedChatServiceServer) StreamMessages(ChatService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedChatServiceServer) GetChatSummariesUID(context.Context, *GetChatSummariesUIDRequest) (*GetChatSummariesUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatSummariesUID not implemented")
}
func (UnimplementedChatServiceServer) DeleteChatByID(context.Context, *DeleteChatByIDRequest) (*DeleteChatByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatByID not implemented")
}
func (UnimplementedChatServiceServer) DeleteAllChatsByUID(context.Context, *DeleteAllChatsByUIDRequest) (*DeleteAllChatsByUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllChatsByUID not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetRecentMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetRecentMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetRecentMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetRecentMessages(ctx, req.(*GetRecentMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).StreamMessages(&chatServiceStreamMessagesServer{ServerStream: stream})
}

type ChatService_StreamMessagesServer interface {
	Send(*CreateMessageResponse) error
	Recv() (*CreateMessageRequest, error)
	grpc.ServerStream
}

type chatServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamMessagesServer) Send(m *CreateMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceStreamMessagesServer) Recv() (*CreateMessageRequest, error) {
	m := new(CreateMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_GetChatSummariesUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatSummariesUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatSummariesUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatSummariesUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatSummariesUID(ctx, req.(*GetChatSummariesUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteChatByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChatByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteChatByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChatByID(ctx, req.(*DeleteChatByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteAllChatsByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllChatsByUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteAllChatsByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteAllChatsByUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteAllChatsByUID(ctx, req.(*DeleteAllChatsByUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _ChatService_CreateMessage_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _ChatService_CreateChat_Handler,
		},
		{
			MethodName: "GetRecentMessages",
			Handler:    _ChatService_GetRecentMessages_Handler,
		},
		{
			MethodName: "GetChatSummariesUID",
			Handler:    _ChatService_GetChatSummariesUID_Handler,
		},
		{
			MethodName: "DeleteChatByID",
			Handler:    _ChatService_DeleteChatByID_Handler,
		},
		{
			MethodName: "DeleteAllChatsByUID",
			Handler:    _ChatService_DeleteAllChatsByUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _ChatService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat_service.proto",
}
