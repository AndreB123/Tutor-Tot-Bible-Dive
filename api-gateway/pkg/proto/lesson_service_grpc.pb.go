// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/lesson_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LessonService_GenerateQuickResponse_FullMethodName      = "/proto.LessonService/GenerateQuickResponse"
	LessonService_GenerateTopicPlan_FullMethodName          = "/proto.LessonService/GenerateTopicPlan"
	LessonService_GenerateLessons_FullMethodName            = "/proto.LessonService/GenerateLessons"
	LessonService_GenerateTests_FullMethodName              = "/proto.LessonService/GenerateTests"
	LessonService_GetAllTopicPlansByUID_FullMethodName      = "/proto.LessonService/GetAllTopicPlansByUID"
	LessonService_GetLessonByID_FullMethodName              = "/proto.LessonService/GetLessonByID"
	LessonService_GetAllLessonPlansByTopicID_FullMethodName = "/proto.LessonService/GetAllLessonPlansByTopicID"
	LessonService_GetAllTestsByLessonID_FullMethodName      = "/proto.LessonService/GetAllTestsByLessonID"
	LessonService_GetAllQuestionsByTestID_FullMethodName    = "/proto.LessonService/GetAllQuestionsByTestID"
	LessonService_GradeTest_FullMethodName                  = "/proto.LessonService/GradeTest"
	LessonService_GetTopicPlanByID_FullMethodName           = "/proto.LessonService/GetTopicPlanByID"
)

// LessonServiceClient is the client API for LessonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonServiceClient interface {
	GenerateQuickResponse(ctx context.Context, in *GenerateQuickResponseRequest, opts ...grpc.CallOption) (*GenerateQuickResponseResponse, error)
	GenerateTopicPlan(ctx context.Context, in *GenerateTopicPlanRequest, opts ...grpc.CallOption) (*GenerateTopicPlanResponse, error)
	GenerateLessons(ctx context.Context, in *GenerateLessonsRequest, opts ...grpc.CallOption) (*GenerateLessonsResponse, error)
	GenerateTests(ctx context.Context, in *GenerateTestRequest, opts ...grpc.CallOption) (*GenerateTestResponse, error)
	GetAllTopicPlansByUID(ctx context.Context, in *GetAllTopicPlansByUIDRequest, opts ...grpc.CallOption) (*GetAllTopicPlansByUIDResponse, error)
	GetLessonByID(ctx context.Context, in *GetLessonByIDRequest, opts ...grpc.CallOption) (*GetLessonByIDResponse, error)
	GetAllLessonPlansByTopicID(ctx context.Context, in *GetAllLessonPlansByTopicIDRequest, opts ...grpc.CallOption) (*GetAllLessonPlansByTopicIDResponse, error)
	GetAllTestsByLessonID(ctx context.Context, in *GetAllTestsByLessonIDRequest, opts ...grpc.CallOption) (*GetAllTestsByLessonIDResponse, error)
	GetAllQuestionsByTestID(ctx context.Context, in *GetAllQuestionsByTestIDRequest, opts ...grpc.CallOption) (*GetAllQuestionsByTestIDResponse, error)
	GradeTest(ctx context.Context, in *GradeTestRequest, opts ...grpc.CallOption) (*GradeTestResponse, error)
	GetTopicPlanByID(ctx context.Context, in *GetTopicPlanByIDRequest, opts ...grpc.CallOption) (*GetTopicPlanByIDResponse, error)
}

type lessonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonServiceClient(cc grpc.ClientConnInterface) LessonServiceClient {
	return &lessonServiceClient{cc}
}

func (c *lessonServiceClient) GenerateQuickResponse(ctx context.Context, in *GenerateQuickResponseRequest, opts ...grpc.CallOption) (*GenerateQuickResponseResponse, error) {
	out := new(GenerateQuickResponseResponse)
	err := c.cc.Invoke(ctx, LessonService_GenerateQuickResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GenerateTopicPlan(ctx context.Context, in *GenerateTopicPlanRequest, opts ...grpc.CallOption) (*GenerateTopicPlanResponse, error) {
	out := new(GenerateTopicPlanResponse)
	err := c.cc.Invoke(ctx, LessonService_GenerateTopicPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GenerateLessons(ctx context.Context, in *GenerateLessonsRequest, opts ...grpc.CallOption) (*GenerateLessonsResponse, error) {
	out := new(GenerateLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_GenerateLessons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GenerateTests(ctx context.Context, in *GenerateTestRequest, opts ...grpc.CallOption) (*GenerateTestResponse, error) {
	out := new(GenerateTestResponse)
	err := c.cc.Invoke(ctx, LessonService_GenerateTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetAllTopicPlansByUID(ctx context.Context, in *GetAllTopicPlansByUIDRequest, opts ...grpc.CallOption) (*GetAllTopicPlansByUIDResponse, error) {
	out := new(GetAllTopicPlansByUIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetAllTopicPlansByUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetLessonByID(ctx context.Context, in *GetLessonByIDRequest, opts ...grpc.CallOption) (*GetLessonByIDResponse, error) {
	out := new(GetLessonByIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetLessonByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetAllLessonPlansByTopicID(ctx context.Context, in *GetAllLessonPlansByTopicIDRequest, opts ...grpc.CallOption) (*GetAllLessonPlansByTopicIDResponse, error) {
	out := new(GetAllLessonPlansByTopicIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetAllLessonPlansByTopicID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetAllTestsByLessonID(ctx context.Context, in *GetAllTestsByLessonIDRequest, opts ...grpc.CallOption) (*GetAllTestsByLessonIDResponse, error) {
	out := new(GetAllTestsByLessonIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetAllTestsByLessonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetAllQuestionsByTestID(ctx context.Context, in *GetAllQuestionsByTestIDRequest, opts ...grpc.CallOption) (*GetAllQuestionsByTestIDResponse, error) {
	out := new(GetAllQuestionsByTestIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetAllQuestionsByTestID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GradeTest(ctx context.Context, in *GradeTestRequest, opts ...grpc.CallOption) (*GradeTestResponse, error) {
	out := new(GradeTestResponse)
	err := c.cc.Invoke(ctx, LessonService_GradeTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetTopicPlanByID(ctx context.Context, in *GetTopicPlanByIDRequest, opts ...grpc.CallOption) (*GetTopicPlanByIDResponse, error) {
	out := new(GetTopicPlanByIDResponse)
	err := c.cc.Invoke(ctx, LessonService_GetTopicPlanByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServiceServer is the server API for LessonService service.
// All implementations must embed UnimplementedLessonServiceServer
// for forward compatibility
type LessonServiceServer interface {
	GenerateQuickResponse(context.Context, *GenerateQuickResponseRequest) (*GenerateQuickResponseResponse, error)
	GenerateTopicPlan(context.Context, *GenerateTopicPlanRequest) (*GenerateTopicPlanResponse, error)
	GenerateLessons(context.Context, *GenerateLessonsRequest) (*GenerateLessonsResponse, error)
	GenerateTests(context.Context, *GenerateTestRequest) (*GenerateTestResponse, error)
	GetAllTopicPlansByUID(context.Context, *GetAllTopicPlansByUIDRequest) (*GetAllTopicPlansByUIDResponse, error)
	GetLessonByID(context.Context, *GetLessonByIDRequest) (*GetLessonByIDResponse, error)
	GetAllLessonPlansByTopicID(context.Context, *GetAllLessonPlansByTopicIDRequest) (*GetAllLessonPlansByTopicIDResponse, error)
	GetAllTestsByLessonID(context.Context, *GetAllTestsByLessonIDRequest) (*GetAllTestsByLessonIDResponse, error)
	GetAllQuestionsByTestID(context.Context, *GetAllQuestionsByTestIDRequest) (*GetAllQuestionsByTestIDResponse, error)
	GradeTest(context.Context, *GradeTestRequest) (*GradeTestResponse, error)
	GetTopicPlanByID(context.Context, *GetTopicPlanByIDRequest) (*GetTopicPlanByIDResponse, error)
	mustEmbedUnimplementedLessonServiceServer()
}

// UnimplementedLessonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServiceServer struct {
}

func (UnimplementedLessonServiceServer) GenerateQuickResponse(context.Context, *GenerateQuickResponseRequest) (*GenerateQuickResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuickResponse not implemented")
}
func (UnimplementedLessonServiceServer) GenerateTopicPlan(context.Context, *GenerateTopicPlanRequest) (*GenerateTopicPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTopicPlan not implemented")
}
func (UnimplementedLessonServiceServer) GenerateLessons(context.Context, *GenerateLessonsRequest) (*GenerateLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLessons not implemented")
}
func (UnimplementedLessonServiceServer) GenerateTests(context.Context, *GenerateTestRequest) (*GenerateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTests not implemented")
}
func (UnimplementedLessonServiceServer) GetAllTopicPlansByUID(context.Context, *GetAllTopicPlansByUIDRequest) (*GetAllTopicPlansByUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTopicPlansByUID not implemented")
}
func (UnimplementedLessonServiceServer) GetLessonByID(context.Context, *GetLessonByIDRequest) (*GetLessonByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonByID not implemented")
}
func (UnimplementedLessonServiceServer) GetAllLessonPlansByTopicID(context.Context, *GetAllLessonPlansByTopicIDRequest) (*GetAllLessonPlansByTopicIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLessonPlansByTopicID not implemented")
}
func (UnimplementedLessonServiceServer) GetAllTestsByLessonID(context.Context, *GetAllTestsByLessonIDRequest) (*GetAllTestsByLessonIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTestsByLessonID not implemented")
}
func (UnimplementedLessonServiceServer) GetAllQuestionsByTestID(context.Context, *GetAllQuestionsByTestIDRequest) (*GetAllQuestionsByTestIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestionsByTestID not implemented")
}
func (UnimplementedLessonServiceServer) GradeTest(context.Context, *GradeTestRequest) (*GradeTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeTest not implemented")
}
func (UnimplementedLessonServiceServer) GetTopicPlanByID(context.Context, *GetTopicPlanByIDRequest) (*GetTopicPlanByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicPlanByID not implemented")
}
func (UnimplementedLessonServiceServer) mustEmbedUnimplementedLessonServiceServer() {}

// UnsafeLessonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServiceServer will
// result in compilation errors.
type UnsafeLessonServiceServer interface {
	mustEmbedUnimplementedLessonServiceServer()
}

func RegisterLessonServiceServer(s grpc.ServiceRegistrar, srv LessonServiceServer) {
	s.RegisterService(&LessonService_ServiceDesc, srv)
}

func _LessonService_GenerateQuickResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQuickResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GenerateQuickResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GenerateQuickResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GenerateQuickResponse(ctx, req.(*GenerateQuickResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GenerateTopicPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTopicPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GenerateTopicPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GenerateTopicPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GenerateTopicPlan(ctx, req.(*GenerateTopicPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GenerateLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GenerateLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GenerateLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GenerateLessons(ctx, req.(*GenerateLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GenerateTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GenerateTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GenerateTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GenerateTests(ctx, req.(*GenerateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetAllTopicPlansByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTopicPlansByUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetAllTopicPlansByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetAllTopicPlansByUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetAllTopicPlansByUID(ctx, req.(*GetAllTopicPlansByUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetLessonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetLessonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetLessonByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetLessonByID(ctx, req.(*GetLessonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetAllLessonPlansByTopicID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLessonPlansByTopicIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetAllLessonPlansByTopicID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetAllLessonPlansByTopicID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetAllLessonPlansByTopicID(ctx, req.(*GetAllLessonPlansByTopicIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetAllTestsByLessonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTestsByLessonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetAllTestsByLessonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetAllTestsByLessonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetAllTestsByLessonID(ctx, req.(*GetAllTestsByLessonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetAllQuestionsByTestID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionsByTestIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetAllQuestionsByTestID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetAllQuestionsByTestID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetAllQuestionsByTestID(ctx, req.(*GetAllQuestionsByTestIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GradeTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GradeTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GradeTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GradeTest(ctx, req.(*GradeTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetTopicPlanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicPlanByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetTopicPlanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetTopicPlanByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetTopicPlanByID(ctx, req.(*GetTopicPlanByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LessonService_ServiceDesc is the grpc.ServiceDesc for LessonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LessonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LessonService",
	HandlerType: (*LessonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuickResponse",
			Handler:    _LessonService_GenerateQuickResponse_Handler,
		},
		{
			MethodName: "GenerateTopicPlan",
			Handler:    _LessonService_GenerateTopicPlan_Handler,
		},
		{
			MethodName: "GenerateLessons",
			Handler:    _LessonService_GenerateLessons_Handler,
		},
		{
			MethodName: "GenerateTests",
			Handler:    _LessonService_GenerateTests_Handler,
		},
		{
			MethodName: "GetAllTopicPlansByUID",
			Handler:    _LessonService_GetAllTopicPlansByUID_Handler,
		},
		{
			MethodName: "GetLessonByID",
			Handler:    _LessonService_GetLessonByID_Handler,
		},
		{
			MethodName: "GetAllLessonPlansByTopicID",
			Handler:    _LessonService_GetAllLessonPlansByTopicID_Handler,
		},
		{
			MethodName: "GetAllTestsByLessonID",
			Handler:    _LessonService_GetAllTestsByLessonID_Handler,
		},
		{
			MethodName: "GetAllQuestionsByTestID",
			Handler:    _LessonService_GetAllQuestionsByTestID_Handler,
		},
		{
			MethodName: "GradeTest",
			Handler:    _LessonService_GradeTest_Handler,
		},
		{
			MethodName: "GetTopicPlanByID",
			Handler:    _LessonService_GetTopicPlanByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lesson_service.proto",
}
