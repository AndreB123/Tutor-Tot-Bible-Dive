syntax = "proto3";

package proto;

option go_package = "user-subscription-service/pkg/proto";

//Types
message User {
    uint32 id = 1;
    string username = 2;
    string email = 3;
}

//Request
message  VerifyUserPasswordRequest {
    uint32 id = 1;
    string password = 2;
}

message GetUserInfoRequest {
    uint32 id = 1;
}

message UpdateUserInfoRequest {
    uint32 id = 1;
    string username = 2;
    string email = 3;
}

message UpdateUserPasswordRequest {
    uint32 id = 1;
    string password = 2;
}

message ListUsersRequest {
}

message DeleteUserRequest {
    uint32 id = 1;
    string password = 2;
}

message SearchForUserRequest {
    string username = 1;
}

//Responses
message  VerifyUserPasswordResponse {
    bool isAuthorized = 1;
}

message GetUserInfoResponse {
    User user = 1;
}

message UpdateUserInfoResponse {
    User user = 1;
}

message UpdateUserPasswordResponse {
    bool success = 1;
}

message ListUsersResponse {
    repeated User users = 1;
}

message DeleteUserResponse {
    bool success = 1;
}

message SearchForUsersResponse {
    repeated User users = 1;
}

service UserService {
    // Verifies that a password is correct for a userID
    rpc  VerifyUserPassword(VerifyUserPasswordRequest) returns (VerifyUserPasswordResponse);

    // Retrieves user information by ID.
    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

    // Updates user information.
    rpc UpdateUserInfo(UpdateUserInfoRequest) returns (UpdateUserInfoResponse);

    // Updates password 
    rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (UpdateUserPasswordResponse);

    // Lists all users in the system.
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

    // Deletes a user from the system.
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

    rpc SearchForUser(SearchForUserRequest) returns (SearchForUsersResponse);
}